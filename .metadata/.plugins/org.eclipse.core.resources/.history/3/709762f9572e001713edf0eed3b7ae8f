/*
 * memory.cpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#include <os/memory.hpp>
#include "bitmap.hpp"
#include <cstdint>
#include <cstddef>
#include <cassert>
// memory.c stuff
namespace os{
	resource_map::resource_map(void* addr, size_t size, const char* name)
			: _name(name), _limit(nullptr) {

	}
#if 0
			mapent ep;
			ep.size =0;
			ep.ptr = addr;

		    struct mapent *ep;

		    /* mapsize had better be at least 2 */
		    if (nelem < 2 || addr <= 0 || size < 0)
		        panic("rminit %s",name);
		    mp->m_name = name;
		    mp->m_limit = (struct mapent *)mp + nelem;

		    /* initially the first entry describes all free space */
		    ep = (struct mapent *)mp + 1;
		    ep->m_size = size;
		    ep->m_addr = addr;
		    /* the remaining slots are unused (indicated by m_addr == 0) */
		    while (++ep < mp->m_limit)
		        ep->m_addr = 0;

				assert(!(nelem < 2 || addr <= 0 || size < 0))
	    	    /* initially the first entry describes all free space */
				mapent* ep = (struct mapent *)mp + 1;
	    	    ep->m_size = size;
	    	    ep->m_addr = addr;
	    	    /* the remaining slots are unused (indicated by m_addr == 0) */
	    	    while (++ep < mp->m_limit)
	    	        ep->m_addr = 0;
		}
		void* resource_map::alloc(size_t size) {
			return nullptr
		}
#endif

};
