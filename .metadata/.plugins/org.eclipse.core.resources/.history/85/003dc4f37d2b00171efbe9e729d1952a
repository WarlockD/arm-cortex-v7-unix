/*
 * context.hpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#ifndef OS_CONTEXT_HPP_
#define OS_CONTEXT_HPP_

#include <cstdint>
#include <cstddef>
#include <functional>
#include <type_traits>

namespace os {
	using pid_t = uint32_t ;
	static constexpr size_t CONFIG_INTR_THREAD_MAX = 32;

	 enum class thread_tag {
		idle,
		kernel,
		root,
		interrupt,
		irq_request,
		log,
		sys	= 16,				/* Systembase */
		user	= CONFIG_INTR_THREAD_MAX	/* Userbase */
	} ;

	 enum class thread_state {
		inactive,
		runnable,
		svc_blocked,
		recv_blocked,
		send_blocked
	} ;
	 struct context_t{
		uint32_t sp;
		uint32_t ret;
		uint32_t ctl;
		uint32_t regs[8];
	 #ifdef CONFIG_FPU
		/* lazy fpu */
		uint32_t fp_regs[16];
		uint32_t fp_flag;
	 #endif
	 } ;

	template<typename T>
	class parent_tree {
	public:
		using type = T;
		using tree_type = parent_tree<T>;
		parent_tree() : _sibling(nullptr) ,_parent(nullptr) ,_child(nullptr) {}
	protected:
		parent_tree _sibling;
		parent_tree _parent;
		parent_tree _child;
	};
	class tcb : public parent_tree<tcb> {
		pid_t _pid;
		thread_state _state;
		uintptr_t _stack_base;
		size_t _stack_size;
		uint32_t _timeout_event;
		context_t _ctx;

	public:
		tcb(pid_t pid) : parent_tree(), _pid(pid), _state(thread_state::inactive) ,_stack_base(0), _stack_size(0),_timeout_event(0) {}
	};

};



