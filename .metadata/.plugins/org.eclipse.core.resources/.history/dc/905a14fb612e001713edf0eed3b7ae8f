/*
 * memory.cpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#include <os/memory.hpp>
#include "bitmap.hpp"
#include <cstdint>
#include <cstddef>
#include <cassert>
// memory.c stuff
#include <cstdlib>
#include <cstring>

namespace {
	constexpr size_t PAGE_SIZE = 4096;
	constexpr size_t MAX_MEMOREY = 16 * 1024 * 1024; // 16 megabyte support for right now
	struct bitmap_t<MAX_MEMOREY/PAGE_SIZE> page_bitmap;
	struct kmemory {

	};
}

namespace os{
	void* kalloc(size_t size){

	}
	void kfree(void*ptr, size_t size){

	}
};

// hack for right now
typedef char* caddr_t;
extern "C" caddr_t _sbrk(int incr)
{
	extern char end __asm("end");
	static char* heap_end = NULL;
	char *prev_heap_end;
	//assert(cpu);
	if (heap_end== 0) { heap_end = &end; } // } ,sizeof(uint32_t)); }
	//assert(proc);
	prev_heap_end = heap_end;
	if ((prev_heap_end + incr) > (char *)__get_MSP())
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}
	heap_end += incr;
	return (caddr_t) prev_heap_end;
}
