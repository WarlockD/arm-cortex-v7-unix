/*
 * memory.cpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#include <os/memory.hpp>
#include "bitmap.hpp"
#include <cstdint>
#include <cstddef>
#include <cassert>
// memory.c stuff
namespace os{
		resource_map::resource_map(void* addr, size_t size, const char* name)
			: _name(name), _limit(nullptr) {
				assert(!(nelem < 2 || addr <= 0 || size < 0))
	    	    /* initially the first entry describes all free space */
				mapent* ep = (struct mapent *)mp + 1;
	    	    ep->m_size = size;
	    	    ep->m_addr = addr;
	    	    /* the remaining slots are unused (indicated by m_addr == 0) */
	    	    while (++ep < mp->m_limit)
	    	        ep->m_addr = 0;
		}
		void* resource_map::alloc(size_t size) {
			register unsigned int a;
			register struct map *bp;

			for (bp=mp; bp->m_size; bp++) {
				if (bp->m_size >= size) {
					a = bp->m_addr;
					bp->m_addr += size;
					if ((bp->m_size -= size) == 0) {
						do {
							bp++;
							(bp-1)->m_addr = bp->m_addr;
						} while ((bp-1)->m_size = bp->m_size);
					}
					return(a);
				}
			}
			return(0);
		}


};
