/*
 * buf.hpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#ifndef OS_BUF_HPP_
#define OS_BUF_HPP_

#include "types.h"

namespace os {
// buffer interface
	struct buf {
		int write(const uint8_t* data, const uint8_t Count)=0;
		int read(const uint8_t* data, const uint8_t Count)=0;
		size_t count() const = 0;
		size_t free_size() const = 0;
		int get() = 0;
		int put(int v)=0;
		~
	};
   class TCbuf
   {
   public:
       TCbuf(uint8_t* const Address, const uint8_t Size);
       bool write(const uint8_t* data, const uint8_t Count);
       void read(uint8_t* const data, const uint8_t Count);
       uint8_t get_count() const { return count; }
       uint8_t get_free_size() const { return size - count; }
       uint8_t get_byte(const uint8_t index) const;
       void clear() { count = 0; last = first; }
       bool put(const uint8_t item);
       uint8_t get();

   private:
      //------------------------------------------------------------------------------
      //
      //  DESCRIPTON: For internal purposes
      //
       void push(const uint8_t item); ///< Use this function with care - it doesn't perform free size check
       uint8_t pop();                 ///< Use this function with care - it doesn't perform count check
      //------------------------------------------------------------------------------

   private:
       uint8_t* buf;
       uint8_t  size;
       volatile uint8_t count;
       uint8_t  first;
       uint8_t  last;
   };
class buf {
};

} /* namespace os */

#endif /* OS_BUF_HPP_ */
