/*
 * buf.h
 *
 *  Created on: Apr 18, 2017
 *      Author: warlo
 */

#ifndef XV6CPP_BUF_H_
#define XV6CPP_BUF_H_
#include "ObjectCache.h"
namespace xv6 {
typedef int (*bdrvfunc)(struct buf*); // sync driver function

class buf {
public:
	static constexpr size_t BSIZE = 512;
	//static constexpr size_t BSIZE = SIZE;
	enum buf_flags {
		B_BUSY  = 	(1<<0),  // buffer is locked by some process
		B_VALID =	(1<<1),  // buffer has been read from disk
		B_DIRTY =	(1<<2),  // buffer needs to be written to disk
		B_DELAY =	(1<<3),  // delay write till release
	};
	buf(dev_t dev, daddr_t sector);		// this is bread
	~buf();					// make sure we are synced before we exit
	//uint8_t* operator() { return static_cast(uint8_t*)(_data); }
	dev_t dev() const { return _buf->dev; }
	daddr_t sector() const { return  _buf->sector; }
	uint8_t* data() const { return  _buf->data; }
	size_t size() const { return  _buf->size; }
	void read();	// force a read
	void write();	// force a write
	bool operator==(const buf& r) const { return  dev() == r.dev() && sector() == r.sector(); }
private:
	struct buf_t {
		dev_t dev;
		daddr_t sector;
		buf_flags flags;
		//void* data;
		uint8_t data[BSIZE];
		size_t size;
	};
	buf_t* _buf;
	friend class static_cache;
};


} /* namespace xv6 */

#endif /* XV6CPP_BUF_H_ */
