/*
 * nuttxinode.h
 *
 *  Created on: Apr 24, 2017
 *      Author: warlo
 */

#ifndef XV6CPP_NUTTXINODE_H_
#define XV6CPP_NUTTXINODE_H_

#include "os.h"
#include "list.h"
#include "bitmap.h"
namespace nuttx {

	class nuttx_inode {
	public:
		/* Inode i_flag values */
		enum class type {
			deleted=0, /* Unlinked     */
			driver, /*   Character driver         */
			block, /*   Block driver             */
			mountpt, /*   Character driver         */
			special, /* Special OS type            */
			nsemaphore, /*   Named semaphore          */
			mqueue, /*   Character driver         */
			smr, /*   Shared memory region     */
		};

		nuttx_inode(const char* name, type t=type::special) : _peer(nullptr), _child(nullptr), _crefs(1), _flags(t), _mode(0), _name(name) {}
		virtual void release() {} // releases this inode
		~nuttx_inode() {
			if(_peer) _peer->release();
			if(_child)_child->release();
			_child = _peer = nullptr;
			_flags = type::deleted; // safty in case this is in a gc of some type
		}

		inline const char* name() const { return _name; }
		inline type flags() const { return _flags; }
		inline mode_t mode() const { return _mode; }
		nuttx_inode *inode_search(const char **path,nuttx_inode **peer,nuttx_inode **parent,const char **relpath);


	protected:
		nuttx_inode *	_peer;     /* Link to same level inode */
		nuttx_inode *	_child;    /* Link to lower level inode */
		int16_t			_crefs;    /* References to inode */
		type		_flags;    /* Flags for inode */
		mode_t			_mode;	 /* Access mode flags */
		const char* 	_name;/* Name of inode (variable) */

	};

} /* namespace xv6 */

#endif /* XV6CPP_NUTTXINODE_H_ */
