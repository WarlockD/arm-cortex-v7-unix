#include "clist.hpp"

constexpr static size_t NCLIST = 50;
constexpr static size_t CBSIZE = 28
constexpr static size_t CROUND  =sizeof(void*) + CBSIZE-1;             /* clist rounding: sizeof(int *) + CBSIZE - 1*/

struct cblock {
	cblock* _next;
	char info[CBSIZE];
} __attribute__((aligned(32)));


class _internal_clist {
	cblock* cfreelist;
	cblock cfree[NCLIST];
public:
	_internal_clist() : cfreelist(nullptr) {
		for(cblock& cp : cfree){
			cp._next = cfreelist;
			cfreelist = &cp;
		}
	}
	operator cblock*() { return cfreelist; }
};

static _internal_clist cfreelist;

int clist::get(){
	cblock* bp;
	int c-1;
	if(_size > 0){



	}
	return c;
}
int clist::put(int c){

}
void clist::get(char* data, size_t size){

}
void clist::put(const char* data, size_t size){

}
size_t clist::size() const{

}
size_t clist::ndflush(size_t count){

}
