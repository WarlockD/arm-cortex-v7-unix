// File system implementation.  Five layers:
//   + Blocks: allocator for raw disk blocks.
//   + Log: crash recovery for multi-step updates.
//   + Files: inode allocator, reading, writing, metadata.
//   + Directories: inode with special contents (list of other inodes!)
//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
//
// This file contains the low-level file system manipulation
// routines.  The (higher-level) system call implementations
// are in sysfile.c.

#include "types.h"
#include "defs.h"
#include "param.h"
#include "stat.h"
#include "proc.h"
#include "spinlock.h"
#include "buf.h"
#include "fs.h"
#include "file.h"
#include <assert.h>



#define min(a, b) ((a) < (b) ? (a) : (b))
static void itrunc (struct inode*);
// kind of some hard limits for the vfs

// this makes ah ard limit on the amount of files we can have
struct {
	struct inode inode[NINODE];
	LIST_HEAD(,inode) free_inode;
	LIST_HEAD(,inode) root_dir;
	ino_t unique_ino;
} icache ;


// Inodes.
//
// An inode describes a single unnamed file.
// The inode disk structure holds metadata: the file's type,
// its size, the number of links referring to it, and the
// list of blocks holding the file's content.
//
// The inodes are laid out sequentially on disk immediately after
// the superblock. Each inode has a number, indicating its
// position on the disk.
//
// The kernel keeps a cache of in-use inodes in memory
// to provide a place for synchronizing access
// to inodes used by multiple processes. The cached
// inodes include book-keeping information that is
// not stored on disk: ip->ref and ip->flags.
//
// An inode and its in-memory represtative go through a
// sequence of states before they can be used by the
// rest of the file system code.
//
// * Allocation: an inode is allocated if its type (on disk)
//   is non-zero. ialloc() allocates, iput() frees if
//   the link count has fallen to zero.
//
// * Referencing in cache: an entry in the inode cache
//   is free if ip->ref is zero. Otherwise ip->ref tracks
//   the number of in-memory pointers to the entry (open
//   files and current directories). iget() to find or
//   create a cache entry and increment its ref, iput()
//   to decrement ref.
//
// * Valid: the information (type, size, &c) in an inode
//   cache entry is only correct when the I_VALID bit
//   is set in ip->flags. ilock() reads the inode from
//   the disk and sets I_VALID, while iput() clears
//   I_VALID if ip->ref has fallen to zero.
//
// * Locked: file system code may only examine and modify
//   the information in an inode and its content if it
//   has first locked the inode. The I_BUSY flag indicates
//   that the inode is locked. ilock() sets I_BUSY,
//   while iunlock clears it.
//
// Thus a typical sequence is:
//   ip = iget(dev, inum)
//   ilock(ip)
//   ... examine and modify ip->xxx ...
//   iunlock(ip)
//   iput(ip)
//
// ilock() is separate from iget() so that system calls can
// get a long-term reference to an inode (as for an open file)
// and only lock it for short periods (e.g., in read()).
// The separation also helps avoid deadlock and races during
// pathname lookup. iget() increments ip->ref so that the inode
// stays cached and pointers to it remain valid.
//
// Many internal file system functions expect the caller to
// have locked the inodes involved; this lets callers create
// multi-step atomic operations.


void iinit (void)
{
	LIST_INIT(&icache.free_inode);
	LIST_INIT(&icache.root_dir);
	icache.unique_ino = 3;
	for(uint32_t i=0; i< NELMS(icache.free_inode);i++) {
		struct inode* in = &icache.free_inode[i];
		LIST_INSERT_HEAD(&icache.free_inode, in,peers);
		in->inum = 0;
		in->ref = 0;
	}

}

// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.

static struct inode* iget (dev_t dev, ino_t inum)
{
    struct inode *ip, *empty;

    // Is the inode already cached?
    empty = 0;

    for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
        if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
            ip->ref++;
            return ip;
        }
        if (empty == 0 && ip->ref == 0) {   // Remember empty slot.
            empty = ip;
        }
    }

    // Recycle an inode cache entry.
    if (empty == 0) {
        panic("iget: no inodes");
    }

    ip = empty;
    ip->dev = dev;
    ip->inum = inum==0 ? icache.unique_ino++ : inum;
    ip->ref = 1;
    ip->flags = 0;
    return ip;
}

// Increment reference count for ip.
// Returns ip to enable ip = idup(ip1) idiom.
struct inode* idup (struct inode *ip)
{
    ip->ref++;
    return ip;
}
void iupdate (struct inode *ip){
    switch(ip->type){
    case INO_FILE:
    	assert(f_sync(&ip->file)==FR_OK);
    	break;
    case INO_DIR:
    	break;
    case INO_PIPE:
    	break;
    case INO_INODE:
    	break;
    case INO_VFS:
    	break;
    case INO_DEV:
    	break;
    case INO_UNUSED:
    	break;
    }

}
// Lock the given inode.
// Reads the inode from disk if necessary.
void ilock (struct inode *ip)
{
    if (ip == 0 || ip->ref < 1)panic("ilock");
    while (ip->flags & I_BUSY)    sleep(ip);
    ip->flags |= I_BUSY;
#if 0
    struct buf *bp;
    struct dinode *dip;

    if (!(ip->flags & I_VALID)) {
        bp = bread(ip->dev, IBLOCK(ip->inum));

        dip = (struct dinode*) bp->data + ip->inum % IPB;
        ip->type = dip->type;
        ip->major = dip->major;
        ip->minor = dip->minor;
        ip->nlink = dip->nlink;
        ip->size = dip->size;

        memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
        brelse(bp);
        ip->flags |= I_VALID;

        if (ip->type == 0) {
            panic("ilock: no type");
        }
    }
#endif
}

// Unlock the given inode.
void iunlock (struct inode *ip)
{
    if (ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1) {
        panic("iunlock");
    }
    ip->flags &= ~I_BUSY;
    wakeup(ip);
}

// Drop a reference to an in-memory inode.
// If that was the last reference, the inode cache entry can
// be recycled.
// If that was the last reference and the inode has no links
// to it, free the inode (and its content) on disk.
void iput (struct inode *ip)
{
    if (ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0) {
        // inode has no links: truncate and free inode.
        if (ip->flags & I_BUSY) panic("iput busy");
        ip->flags |= I_BUSY;
        itrunc(ip);
        ip->type = 0;
        iupdate(ip);

        ip->flags = 0;
        wakeup(ip);
    }
    ip->ref--;
}

// Common idiom: unlock, then put.
void iunlockput (struct inode *ip)
{
    iunlock(ip);
    iput(ip);
}


// Truncate inode (discard contents).
// Only called when the inode has no links
// to it (no directory entries referring to it)
// and has no in-memory reference to it (is
// not an open file or current directory).
static void itrunc (struct inode *ip)
{
    int i, j;
    struct buf *bp;
    uint *a;
    iupdate(ip);
    switch(ip->type){
    case INO_FILE:
    	assert(f_close(&ip->file)==FR_OK);
    	break;
    case INO_DIR:
    	assert(f_closedir(&ip->dir)==FR_OK);
    	break;
    case INO_PIPE:
    	break;
    case INO_INODE:
    	break;
    case INO_VFS:
    	break;
    case INO_DEV:
    	break;
    }
    ip->size = 0;

}

// Copy stat information from inode.
void stati (struct inode *ip, struct stat *st)
{
    st->st_dev = ip->dev;
    st->st_ino = ip->inum;
    st->st_mode = ip->type;
    st->st_nlink = ip->nlink;
    st->st_size = ip->size;
}

//PAGEBREAK!
// Read data from inode.
int readi (struct inode *ip, char *dst, uint off, uint n)
{
    ilock(ip);
    switch(ip->type){
    case INO_FILE:
        if (off > ip->size || off + n < off) return -1;
        if (off + n > ip->size)  n = ip->size - off;
    	assert(f_lseek(&ip->file,off)==FR_OK);
    	assert(f_read(&ip->dir, dst, n, (UINT*)&n)==FR_OK);
    	break;
    case INO_INODE:
    	return readi(ip->link,dst,off,n);
    	break;
    case INO_DEV:
    	if(MAJOR(ip->dev) < 0 || MAJOR(ip->dev) >= NDEV ||
    			!devsw[ip->major].read) return -1;
    	 return devsw[ip->major].read(ip, dst, n);
    case INO_VFS:
    case INO_DIR:
    case INO_PIPE:
    default:
    	assert(0);
    	n=-1;
    	break;
    };
    iunlock(ip);
    return n;
}

// PAGEBREAK!
// Write data to inode.
int writei (struct inode *ip, char *src, uint off, uint n)
{
	   ilock(ip);
    switch(ip->type){
    case INO_FILE:
        if (off > ip->size || off + n < off) return -1;
        if (off + n > ip->size)  n = ip->size - off;
    	assert(f_lseek(&ip->file,off)==FR_OK);
    	assert(f_write(&ip->dir, src, n, (UINT*)&n)==FR_OK);
    	break;
    case INO_INODE:
    	return writei(ip->link,src,off,n);
    	break;
    case INO_DEV:
    	if(MAJOR(ip->dev) < 0 || MAJOR(ip->dev) >= NDEV ||
    			!devsw[ip->major].write) return -1;
    	 return devsw[ip->major].write(ip, src, n);
    case INO_VFS:
    case INO_DIR:
    case INO_PIPE:
    default:
    	assert(0);
    	n=-1;
    	break;
    };
    iunlock(ip);
    return n;
}

//PAGEBREAK!
// Directories

int namecmp (const char *s, const char *t)
{
    return strncmp(s, t, DIRSIZ);
}

// Look for a directory entry in a directory.
// If found, return inode of file
struct inode* dirlookup (struct inode *dp, const char *name)
{
    if (dp->type != INO_DIR) panic("dirlookup not DIR");
    FILINFO fno;
    FRESULT res;
	ilock(dp);
	res = f_readdir(&dp->dir, NULL); // rewind directory
	for (;;) {
         res = f_readdir(&dp->dir, &fno);                    /* Read a directory item */
         if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
         if (fno.fattrib & AM_DIR) {                    /* It is a directory */
        	 if(strncmp(name, fno.fname, sizeof(fno.fname))
#if _USE_LFN
        	    || strncmp(name, fno.lfname, fno.lfsize)
#endif
				){
        		 struct inode* i = iget(dp->dev,0);
        		 i->attrib = fno.fattrib;
        		 if (fno.fattrib & AM_DIR) {  /* It is a directory */
        			 struct buf* b = balloc();
        			 i->type = INO_DIR;
        			 sprintf(b->data, "/%s",name);)
        			 assert(f_opendir(&i->dir,(const char*)b->data)==FR_OK);

        		 }

        	 }
             i = strlen(path);
             sprintf(&path[i], "/%s", fno.fname);
             res = scan_files(path);                    /* Enter the directory */
             if (res != FR_OK) break;
             path[i] = 0;
         } else {                                       /* It is a file. */
             printf("%s/%s\n", path, fno.fname);
         }
     }
    for (off = 0; off < dp->size; off += sizeof(de)) {
        if (readi(dp, (char*) &de, off, sizeof(de)) != sizeof(de)) {
            panic("dirlink read");
        }

        if (de.inum == 0) {
            continue;
        }

        if (namecmp(name, de.name) == 0) {
            // entry matches path element
            if (poff) {
                *poff = off;
            }

            inum = de.inum;
            return iget(dp->dev, );
        }
    }
    iunlock(dp);
    return 0;
}

// Write a new directory entry (name, inum) into the directory dp.
int dirlink (struct inode *dp, char *name, uint inum)
{
    int off;
    struct dirent de;
    struct inode *ip;

    // Check that name is not present.
    if ((ip = dirlookup(dp, name, 0)) != 0) {
        iput(ip);
        return -1;
    }

    // Look for an empty dirent.
    for (off = 0; off < dp->size; off += sizeof(de)) {
        if (readi(dp, (char*) &de, off, sizeof(de)) != sizeof(de)) {
            panic("dirlink read");
        }

        if (de.inum == 0) {
            break;
        }
    }

    strncpy(de.name, name, DIRSIZ);
    de.inum = inum;

    if (writei(dp, (char*) &de, off, sizeof(de)) != sizeof(de)) {
        panic("dirlink");
    }

    return 0;
}

//PAGEBREAK!
// Paths

// Copy the next path element from path into name.
// Return a pointer to the element following the copied one.
// The returned path has no leading slashes,
// so the caller can check *path=='\0' to see if the name is the last one.
// If no name to remove, return 0.
//
// Examples:
//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
//   skipelem("///a//bb", name) = "bb", setting name = "a"
//   skipelem("a", name) = "", setting name = "a"
//   skipelem("", name) = skipelem("////", name) = 0
//
static char* skipelem (char *path, char *name)
{
    char *s;
    int len;

    while (*path == '/') {
        path++;
    }

    if (*path == 0) {
        return 0;
    }

    s = path;

    while (*path != '/' && *path != 0) {
        path++;
    }

    len = path - s;

    if (len >= DIRSIZ) {
        memmove(name, s, DIRSIZ);
    } else {
        memmove(name, s, len);
        name[len] = 0;
    }

    while (*path == '/') {
        path++;
    }

    return path;
}

// Look up and return the inode for a path name.
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
static struct inode* namex (char *path, int nameiparent, char *name)
{
	
    struct inode *ip, *next;

    if (*path == '/') {
        ip = iget(ROOTDEV, ROOTINO);
    } else {
        ip = idup(proc->cwd);
    }

    while ((path = skipelem(path, name)) != 0) {
        ilock(ip);

        if (ip->type != T_DIR) {
            iunlockput(ip);
            return 0;
        }

        if (nameiparent && *path == '\0') {
            // Stop one level early.
            iunlock(ip);
            return ip;
        }

        if ((next = dirlookup(ip, name, 0)) == 0) {
            iunlockput(ip);
            return 0;
        }

        iunlockput(ip);
        ip = next;
    }

    if (nameiparent) {
        iput(ip);
        return 0;
    }

    return ip;
}

struct inode* namei (const char *path)
{
    char name[DIRSIZ];
    return namex(path, 0, name);
}

struct inode* nameiparent (const char *path, const char *name)
{
    return namex(path, 1, name);
}
