/*
 * buf.cpp
 *
 *  Created on: Apr 18, 2017
 *      Author: warlo
 */

#include "buf.h"
#include "ObjectCache.h"

namespace {
	struct buf_hash {
		std::size_t operator()(dev_t dev, daddr_t sector) const {
			return dev<<16 ^ sector;
		}
	};
	struct buf_equals {
		bool operator()(const xv6::buf& b, dev_t dev, daddr_t sector) const {
			return dev == b.dev() && sector == b.sector();
		}
	};
	static constexpr size_t CACHE_SIZE = 64;
	using buf_cache_t = xv6::static_cache<xv6::buf::buf_t,buf_equals, buf_hash, CACHE_SIZE>;
	static buf_cache_t buf_cache;
};

namespace xv6 {


	buf::buf(dev_t dev, daddr_t sector) : _buf(buf_cache.aquire(dev,sector)){
		read(); // force a read
	}
	buf::~buf(){
		if(_buf->flags & B_DIRTY) write();
		buf_cache.release(_buf);
		_buf = nullptr;
		// make sure we are synced before we exit
	}
	//uint8_t* operator() { return static_cast(uint8_t*)(_data); }

	void buf::read(){
		// force a read
	}
	void buf::write(){
		// force a write
	}


} /* namespace xv6 */
