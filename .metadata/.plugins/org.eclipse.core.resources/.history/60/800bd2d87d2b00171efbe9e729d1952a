/*
 * context.hpp
 *
 *  Created on: Apr 27, 2017
 *      Author: Paul
 */

#ifndef OS_CONTEXT_HPP_
#define OS_CONTEXT_HPP_

#include <cstdint>
#include <cstddef>
#include <functional>
#include <type_traits>

namespace os {
	using pid_t = uint32_t ;
	static constexpr size_t CONFIG_INTR_THREAD_MAX = 32;

	 enum class thread_tag {
		idle,
		kernel,
		root,
		interrupt,
		irq_request,
		log,
		sys	= 16,				/* Systembase */
		user	= CONFIG_INTR_THREAD_MAX	/* Userbase */
	} ;

	 enum class thread_state {
		inactive,
		runnable,
		svc_blocked,
		recv_blocked,
		send_blocked
	} ;
	 struct context_t{
		uint32_t sp;
		uint32_t ret;
		uint32_t ctl;
		uint32_t regs[8];
	 #ifdef CONFIG_FPU
		/* lazy fpu */
		uint32_t fp_regs[16];
		uint32_t fp_flag;
	 #endif
	 } ;

	template<typename T>
	class parent_tree {
	public:
		using type = T;
		using tree_type = parent_tree<T>;
		parent_tree() : _sibling(nullptr) ,_parent(nullptr) ,_child(nullptr) {}
	protected:
		tree_type _sibling;
		tree_type _parent;
		tree_type _child;
	};
	class tcb : public parent_tree<tcb> {
		pid_t _pid;
		thread_state _state;
		uintptr_t _stack_base;
		size_t _stack_size;
		uint32_t _timeout_event;
		context_t _ctx;

	public:
		tcb(pid_t pid) : parent_tree(), _pid(pid), _state(thread_state::inactive) ,_stack_base(0), _stack_size(0),_timeout_event(0) {}
	};


class context {
public:
	struct sw_regs {

	};
	enum {
		REG_R13 =0,  /* R13 = SP at time of interrupt */
		#ifdef CONFIG_ARMV7M_USEBASEPRI
		REG_BASEPRI,  /* BASEPRI */
		#else
		REG_PRIMASK,  /* PRIMASK */
		#endif
		REG_R4,/* R4 */
		REG_R5, /* R5 */
		REG_R6 , /* R6 */
		REG_R7 ,  /* R7 */
		REG_R8 ,  /* R8 */
		REG_R9 ,  /* R9 */
		REG_R10,  /* R10 */
		REG_R11, /* R11 */
		#ifdef CONFIG_BUILD_PROTECTED
		REG_EXC_RETURN , /* EXC_RETURN */
		SW_INT_REGS,
		#else
		SW_INT_REGS,
		#endif
	};
	enum {
#  define REG_D0            (SW_INT_REGS+0)  /* D0 */
#  define REG_S0            (SW_INT_REGS+0)  /* S0 */
#  define REG_S1            (SW_INT_REGS+1)  /* S1 */
#  define REG_D1            (SW_INT_REGS+2)  /* D1 */
#  define REG_S2            (SW_INT_REGS+2)  /* S2 */
#  define REG_S3            (SW_INT_REGS+3)  /* S3 */
#  define REG_D2            (SW_INT_REGS+4)  /* D2 */
#  define REG_S4            (SW_INT_REGS+4)  /* S4 */
#  define REG_S5            (SW_INT_REGS+5)  /* S5 */
#  define REG_D3            (SW_INT_REGS+6)  /* D3 */
#  define REG_S6            (SW_INT_REGS+6)  /* S6 */
#  define REG_S7            (SW_INT_REGS+7)  /* S7 */
#  define REG_D4            (SW_INT_REGS+8)  /* D4 */
#  define REG_S8            (SW_INT_REGS+8)  /* S8 */
#  define REG_S9            (SW_INT_REGS+9)  /* S9 */
#  define REG_D5            (SW_INT_REGS+10) /* D5 */
#  define REG_S10           (SW_INT_REGS+10) /* S10 */
#  define REG_S11           (SW_INT_REGS+11) /* S11 */
#  define REG_D6            (SW_INT_REGS+12) /* D6 */
#  define REG_S12           (SW_INT_REGS+12) /* S12 */
#  define REG_S13           (SW_INT_REGS+13) /* S13 */
#  define REG_D7            (SW_INT_REGS+14) /* D7 */
#  define REG_S14           (SW_INT_REGS+14) /* S14 */
#  define REG_S15           (SW_INT_REGS+15) /* S15 */
#  define REG_D8            (SW_INT_REGS+16) /* D8 */
#  define REG_S16           (SW_INT_REGS+16) /* S16 */
#  define REG_S17           (SW_INT_REGS+17) /* S17 */
#  define REG_D9            (SW_INT_REGS+18) /* D9 */
#  define REG_S18           (SW_INT_REGS+18) /* S18 */
#  define REG_S19           (SW_INT_REGS+19) /* S19 */
#  define REG_D10           (SW_INT_REGS+20) /* D10 */
#  define REG_S20           (SW_INT_REGS+20) /* S20 */
#  define REG_S21           (SW_INT_REGS+21) /* S21 */
#  define REG_D11           (SW_INT_REGS+22) /* D11 */
#  define REG_S22           (SW_INT_REGS+22) /* S22 */
#  define REG_S23           (SW_INT_REGS+23) /* S23 */
#  define REG_D12           (SW_INT_REGS+24) /* D12 */
#  define REG_S24           (SW_INT_REGS+24) /* S24 */
#  define REG_S25           (SW_INT_REGS+25) /* S25 */
#  define REG_D13           (SW_INT_REGS+26) /* D13 */
#  define REG_S26           (SW_INT_REGS+26) /* S26 */
#  define REG_S27           (SW_INT_REGS+27) /* S27 */
#  define REG_D14           (SW_INT_REGS+28) /* D14 */
#  define REG_S28           (SW_INT_REGS+28) /* S28 */
#  define REG_S29           (SW_INT_REGS+29) /* S29 */
#  define REG_D15           (SW_INT_REGS+30) /* D15 */
#  define REG_S30           (SW_INT_REGS+30) /* S30 */
#  define REG_S31           (SW_INT_REGS+31) /* S31 */
#  define REG_FPSCR         (SW_INT_REGS+32) /* Floating point status and control */
#  define SW_FPU_REGS       (33)
#else
#  define SW_FPU_REGS       (0)
#endif
	};
};

} /* namespace os */

#endif /* OS_CONTEXT_HPP_ */
