/****************************************************************************
 * fs/fs_initialize.c
 *
 *   Copyright (C) 2014 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <gnutt@nuttx.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/

#include <nuttx/config.h>

#include "inode/inode.h"
#include "aio/aio.h"

/****************************************************************************
 * Public Functions
 ****************************************************************************/

/****************************************************************************
 * Name: fs_initialize
 *
 * Description:
 *   This is called from the OS initialization logic to configure the file
 *   system.
 *
 ****************************************************************************/
// this is the file initilize system
// this hack job is to get ut of the kconfig system for just the file system I want to play with
#ifdef CONFIG_FS_UNIONFS
#include "unionfs\fs_unionfs.c"
#endif

#ifdef CONFIG_FS_TMPFS
#ifdef DISABLE_MOUNTPOINT
#error DISABLE_MOUNTPOINT defined!
#endif
#ifndef CONFIG_FS_TMPFS_BLOCKSIZE
#define CONFIG_FS_TMPFS_BLOCKSIZE 512
#endif
#ifndef CONFIG_FS_TMPFS_DIRECTORY_ALLOCGUARD
#define CONFIG_FS_TMPFS_DIRECTORY_ALLOCGUARD 64
#endif
#ifndef CONFIG_FS_TMPFS_DIRECTORY_FREEGUARD
#define CONFIG_FS_TMPFS_DIRECTORY_FREEGUARD 128
#endif
#ifndef CONFIG_TMPFS_FILE_ALLOCGUARD
#define CONFIG_TMPFS_FILE_ALLOCGUARD 512
#endif
#ifndef CONFIG_TMPFS_FILE_FREEGUARD
#define CONFIG_TMPFS_FILE_FREEGUARD 1024
#endif
#include "tmpfs\fs_tmpfs.c"
#endif

void fs_initialize(void)
{
  /* Initial inode, file, and VFS data structures */

  inode_initialize();

#ifdef CONFIG_FS_AIO
  /* Initialize for asynchronous I/O */

  aio_initialize();

#endif
}
