/*
 * buf.h
 *
 *  Created on: Apr 18, 2017
 *      Author: warlo
 */

#ifndef XV6CPP_BUF_H_
#define XV6CPP_BUF_H_
#include "ObjectCache.h"
namespace xv6 {
typedef int (*bdrvfunc)(struct buf*); // sync driver function

class buf {
public:
	static constexpr size_t BSIZE = 512;
	//static constexpr size_t BSIZE = SIZE;
	enum buf_flags {
		B_BUSY  = 	(1<<0),  // buffer is locked by some process
		B_VALID =	(1<<1),  // buffer has been read from disk
		B_DIRTY =	(1<<2),  // buffer needs to be written to disk
		B_DELAY =	(1<<3),  // delay write till release
	};
	buf(dev_t dev, daddr_t sector, void* data, size_t size) :
		_dev(dev), _sector(sector), _flags(0), _data(data), _size(size) {}
	uint8_t* operator() { return static_cast(uint8_t*)(_data); }

private:
	friend class static_cache;
	dev_t _dev;
	daddr_t _sector;
	buf_flags _flags
	void* _data;
	size_t _size;

};



struct buf {
	enum buf_flags 	flags;
    dev_t      		dev;
    daddr_t    		sector;
    TAILQ_ENTRY(buf) hash;
   // struct buf *	qnext; 	// disk queue
    size_t			size;	// size of the buffer
    uint8_t*		data;	// buffer address
};



// bio.c
void            binit(void);
void		    bdriver(dev_t dev, bdrvfunc read, bdrvfunc write);
struct buf*     bread(dev_t dev, daddr_t sector);
void            brelse(struct buf* bp);
void            bwrite(struct buf* bp);

} /* namespace xv6 */

#endif /* XV6CPP_BUF_H_ */
